Tutorial for the Agent Server (v 1.0)

Unless you are simply previewing the doc, please run through the installation process first, install.txt.

The agent server supports a REST API that uses JSON as its primary information format.

The curl command is probably the simplest and best way to experiment with the agent server. 

The tutorial command assumes you are using the bash shell (e.g., cygwin on Windows), or something
comparable.

Once you have downloaded and installed the agent server as detailed in install.txt you are ready to
actually start working with agents.

1. Create a new new user

- See that there are currently no users registered

You type or copy&paste:

curl http://localhost:8080/users

Response you should see:

{"users": []}

- Register new user

curl -X POST 'http://localhost:8080/users?id=test-user-1'

- See that the new user is now registered

curl http://localhost:8080/users

{"users": [{
    "display_name": "",
    "id": "test-user-1"
}]}

curl -X PUT http://localhost:8080/users/test-user-1 -H Content-type:application/json -d '{"display_name": "Your Name"}'

That all fit on one line, but more verbose JSON can be entered on any number of lines, for example:

curl -X PUT http://localhost:8080/users/test-user-1 -H Content-type:application/json -d '
{"display_name": "Your Name",
 "full_name": "Your Full Name",
 "email": "you@example.com",
 "nick_name": "Youri",
 "organization": "Your company",
 "bio": "Your bio",
 "interests": "Your interests"
 }'

That worked.

And here is the updated user list:

{"users": [{
    "display_name": "Your Name",
    "id": "test-user-1"
}]}

That only gives us a minimal subset of the info for each user. Let's get the full info for one user:

curl http://localhost:8080/users/test-user-1

{
    "approved": true,
    "bio": "Your bio",
    "comment": "",
    "display_name": "Your Name",
    "email": "you@example.com",
    "full_name": "Your Full Name",
    "id": "test-user-1",
    "incognito": false,
    "interests": "Your interests",
    "nick_name": "Youri",
    "organization": "Your company",
    "password": "test-pwd-1",
    "password_hint": "",
    "sha_id": "5c0533500f0dc351421d2c6c50717252",
    "sha_password": "f678318ac54a4bff2e3b8a7341245cfb"
}

9. Create a new agent definition

We went through all of that trouble creating a new user because agents are owned by or associated
with a specific user.

So, here's the command to create a simple "Hello World" agent associated with the new user
 
curl -X POST 'http://localhost:8080/users/test-user-1/agent_definitions' -H Content-type:application/json -d'
{
 "name": "definitions1",
 "outputs": [
  {
   "name": "output1",
   "type": "string",
   "default_value": "Hello World"
  },
 ]
}'

Okay, that worked. Let's query what the server thinks it has:

curl 'http://localhost:8080/users/test-user-1/agent_definitions'

{"agent_definitions": [{
    "user": "test-user-1",
    "name": "HelloWorld",
    "description": ""
}]}

That's fine as a quick summary, but doesn't give much detail. Lets request the details:

curl 'http://localhost:8080/users/test-user-1/agent_definitions/HelloWorld'

{
    "user": "test-user-1",
    "name": "HelloWorld",
    "description": "",
    "created": "Mon, 19 Mar 2012 11:20:29 -0400",
    "modified": "Mon, 19 Mar 2012 11:20:29 -0400",
    "parameters": [],
    "inputs": [],
    "timers": [],
    "conditions": [],
    "notifications": [],
    "scripts": [],
    "scratchpad": [],
    "memory": [],
    "outputs": [{
        "default_value": "Hello World",
        "name": "output1",
        "type": "string"
    }],
    "goals": [],
    "trigger_interval": "50",
    "reporting_interval": "200",
    "enabled": true
}

That's more than we expected, but everything we expected is there, including the 'output1' field.

Before we forget, lets add the 'description'. We could have supplied it with the original definition,
but we can change any of the agent definition fields at any time. So, this adds the description:

curl -X PUT 'http://localhost:8080/users/test-user-1/agent_definitions/HelloWorld' -H Content-type:application/json -d'
{"description": "Our first test of an agent definition"}'

And lets query the details again

curl 'http://localhost:8080/users/test-user-1/agent_definitions/HelloWorld'

{
    "user": "test-user-1",
    "name": "HelloWorld",
    "description": "Our first test of an agent definition",
    "created": "Mon, 19 Mar 2012 17:18:10 -0400",
    "modified": "Mon, 19 Mar 2012 17:18:50 -0400",
    "parameters": [],
    "inputs": [],
    "timers": [],
    "conditions": [],
    "notifications": [],
    "scripts": [],
    "scratchpad": [],
    "memory": [],
    "outputs": [{
        "default_value": "Hello World",
        "name": "output1",
        "type": "string"
    }],
    "goals": [],
    "trigger_interval": "50",
    "reporting_interval": "200",
    "enabled": true
}

Note that the agent definition is tied to a particular user.

And here is the updated summary of agent definitions:

curl 'http://localhost:8080/users/test-user-1/agent_definitions'

{"agent_definitions": [{
    "user": "test-user-1",
    "addresses": "http://sfreebase.cloudapp.net",
    "type":"local",
    "name": "HelloWorld",
    "description": "Our first test of an agent definition"
}]}

At this stage nothing is actually running. All we have is the "definition" for the agent, which is
essentially the source code for the agent.

10. Instantiate an agent or instance of an agent definition

To create a running instance of our new agent definition:

curl -X POST 'http://localhost:8080/users/test-user-1/agents' -H Content-type:application/json -d'
{
 "name": "MyHelloWorld-1",
 "definition": "HelloWorld"
}'

Now lets query what agents are running:

curl 'http://localhost:8080/users/test-user-1/agents'

{"agent_instances": [{
    "user": "test-user-1",
    "name": "MyHelloWorld-1",
    "addresses": "http://sfreebase.cloudapp.net",
        "type":"local",
    "definition": "HelloWorld",
    "description": ""
}]}

Again, that is just a quick summary with minimal detail. Once again, we failed to provide a
description, so let's add one:

curl -X PUT 'http://localhost:8080/users/test-user-1/agents/MyHelloWorld-1' -H Content-type:application/json -d'
{"description": "Our first test instance of an agent definition"}'

Let's just check to see that the new description is in the summary:

curl 'http://localhost:8080/users/test-user-1/agents'

{"agent_instances": [{
    "user": "test-user-1",
    "name": "MyHelloWorld-1",
    "addresses": "http://sfreebase.cloudapp.net",
        "type":"local",
    "definition": "HelloWorld",
    "description": "Our first test instance of an agent definition"
}]}

Now lets query for the full detail and status of the agent instance:

curl 'http://localhost:8080/users/test-user-1/agents/MyHelloWorld-1'

{
    "user": "test-user-1",
    "name": "MyHelloWorld-1",
    "definition": "HelloWorld",
    "addresses": "http://sfreebase.cloudapp.net",
        "type":"local",
    "description": "Our first test instance of an agent definition",
    "instantiated": "Tue, 20 Mar 2012 18:43:52 -0400",
    "updated": "Tue, 20 Mar 2012 18:43:58 -0400",
    "trigger_interval": "50",
    "reporting_interval": "200",
    "public_output": false,
    "limit_instance_states_stored": 25,
    "enabled": true,
    "parameter_values": {},
    "inputs_changed": "",
    "triggered": "",
    "outputs_changed": "Tue, 20 Mar 2012 18:43:52 -0400",
    "status": "active"
}

An agent instance is tied to both a user and an agent definition.

The status command gives similar information:

curl 'http://localhost:8080/users/test-user-1/agents/MyHelloWorld-1/status'

{
    "user": "test-user-1",
    "name": "MyHelloWorld-1",
    "addresses": "http://sfreebase.cloudapp.net",
        "type":"local",
    "definition": "HelloWorld",
    "description": "Our first test instance of an agent definition",
    "instantiated": "Tue, 20 Mar 2012 18:43:52 -0400",
    "updated": "Tue, 20 Mar 2012 18:43:58 -0400",
    "trigger_interval": "50",
    "reporting_interval": "200",
    "public_output": false,
    "limit_instance_states_stored": 25,
    "enabled": true,
    "parameter_values": {},
    "inputs_changed": "",
    "triggered": "",
    "outputs_changed": "Tue, 20 Mar 2012 18:43:52 -0400",
    "status": "active"
}

Basically, the only thing that matters there is when the agent started running and that it is "active".

Since this agent doesn't really do anything but produce some output by default, let's query that output:

curl 'http://localhost:8080/users/test-user-1/agents/MyHelloWorld-1/output'

{"output1": "Hello World"}

That's it, the output of the agent is "Hello World".

By default, all agent server communication is in the JSON format, but you can request other formats.
For example, here is the same output but in XML:

curl 'http://localhost:8080/users/test-user-1/agents/MyHelloWorld-1/output.xml'

<?xml version="1.0" encoding="UTF-8"?><output1>Hello World</output1>

Here's an alternate form for requesting that same output:

curl 'http://localhost:8080/users/test-user-1/agents/MyHelloWorld-1/output&format=xml'

We can also request plain text:

curl 'http://localhost:8080/users/test-user-1/agents/MyHelloWorld-1/output.text'

Hello World

That's closer to what people might expect

And here is the alternate request format for the same output:

curl 'http://localhost:8080/users/test-user-1/agents/MyHelloWorld-1/output&format=text'

And just in case you want to view the output of an agent in a web browser, use HTML format:

curl 'http://localhost:8080/users/test-user-1/agents/MyHelloWorld-1/output.html'

curl 'http://localhost:8080/users/test-user-1/agents/MyHelloWorld-1/output&format=html'

Generally, real agents work in one of two manners:

1. Ping a web resource based on a timer.
2. Process the output of another agent (or agents) and produce new output.

Let's define a very simple timer-based agent:

curl -X POST 'http://localhost:8080/users/test-user-1/agent_definitions' -H Content-type:application/json -d'
{
 "name": "Counter",
 "memory": [
  {
   "name": "counter",
   "type": "int"
  }
 ],
 "timers": [
  {
   "name": "count",
   "interval": "seconds(3)",
   "script": "counter++;"
  }
 ],
 "outputs": [
  {
   "name": "output1",
   "type": "string",
   "compute": "\"Count is \" + counter"
  },
 ]
}'

Note that we do not need to initialize the counter to zero - the agent server automatically initializes
all variables based on their type.
 
Now instantiate the counter agent:

curl -X POST 'http://localhost:8080/users/test-user-1/agents' -H Content-type:application/json -d'
{
 "name": "Agent1",
 "definition": "Counter",
 "addresses": "http://sfreebase.cloudapp.net",
     "type":"local"
}'

Now lets query what agents are running:

curl 'http://localhost:8080/users/test-user-1/agents'

{"agent_instances": [
    {
        "user": "test-user-1",
        "name": "MyHelloWorld-1",
        "definition": "HelloWorld",
        "description": "Our first test instance of an agent definition"
    },
    {
        "user": "test-user-1",
        "name": "MyCounter-1",
        "definition": "Counter",
        "description": ""
    }
]}

And the status of the new agent:

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-1/status'

{
    "user": "test-user-1",
    "name": "MyCounter-1",
    "definition": "Counter",
    "description": "",
    "instantiated": "Tue, 20 Mar 2012 18:48:49 -0400",
    "updated": "",
    "trigger_interval": "50",
    "reporting_interval": "200",
    "public_output": false,
    "limit_instance_states_stored": 25,
    "enabled": true,
    "parameter_values": {},
    "inputs_changed": "",
    "triggered": "",
    "outputs_changed": "Tue, 20 Mar 2012 18:49:07 -0400",
    "status": "active"
}

And finally its current output:

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-1/output'

{"output1": "Count is 23"}

Wait a few seconds and try that again...

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-1/output'

{"output1": "Count is 34"}

Basically, the count increments every three seconds.

We can pause the agent, which freezes the timer:

curl -X PUT 'http://localhost:8080/users/test-user-1/agents/MyCounter-1/pause'

Check status again and see that counter has not changed:

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-1/output'

{"output1": "Count is 34"}

Now resume the agent

curl -X PUT 'http://localhost:8080/users/test-user-1/agents/MyCounter-1/resume'

And see that counter is indeed counting again:

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-1/output'

{"output1": "Count is 55"}

We can also query the full internal state of the agent with the "&state=yes" parameter:

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-1/status&state=yes&count=1'

{
    "user": "test-user-1",
    "name": "MyCounter-1",
    "definition": "Counter",
    "description": "",
    "instantiated": "Tue, 20 Mar 2012 18:48:49 -0400",
    "updated": "",
    "trigger_interval": "50",
    "reporting_interval": "200",
    "public_output": false,
    "limit_instance_states_stored": 25,
    "enabled": true,
    "parameter_values": {},
    "inputs_changed": "",
    "triggered": "",
    "outputs_changed": "Tue, 20 Mar 2012 18:52:22 -0400",
    "status": "active",
    "state": [{
        "exceptions": [],
        "inputs": {},
        "last_dismissed_exception": "",
        "memory": {"counter": 71},
        "notification_history": [],
        "notifications": [],
        "outputs": {"output1": "Count is 70"},
        "parameters": {},
        "time": "2012-03-20T18:52:22.915-0400"
    }]
}

Note that we used the "&count=1" parameter. The agent server actually keeps a history of state changes
for each agent instance (that's what the 'limit_instance_states_stored' property controls), but we just
wanted to see the latest. Use "&count=-1" to see the full history (25 states or whatever you set the
limit to be.

Let's look at the most recent 3 states:

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-1/status&state=yes&count=3'

{
    "user": "test-user-1",
    "name": "MyCounter-1",
    "definition": "Counter",
    "description": "",
    "instantiated": "Tue, 20 Mar 2012 18:48:49 -0400",
    "updated": "",
    "trigger_interval": "50",
    "reporting_interval": "200",
    "public_output": false,
    "limit_instance_states_stored": 25,
    "enabled": true,
    "parameter_values": {},
    "inputs_changed": "",
    "triggered": "",
    "outputs_changed": "Tue, 20 Mar 2012 18:58:29 -0400",
    "status": "active",
    "state": [
        {
            "exceptions": [],
            "inputs": {},
            "last_dismissed_exception": "",
            "memory": {"counter": 191},
            "notification_history": [],
            "notifications": [],
            "outputs": {"output1": "Count is 190"},
            "parameters": {},
            "time": "2012-03-20T18:58:23.854-0400"
        },
        {
            "exceptions": [],
            "inputs": {},
            "last_dismissed_exception": "",
            "memory": {"counter": 192},
            "notification_history": [],
            "notifications": [],
            "outputs": {"output1": "Count is 191"},
            "parameters": {},
            "time": "2012-03-20T18:58:26.854-0400"
        },
        {
            "exceptions": [],
            "inputs": {},
            "last_dismissed_exception": "",
            "memory": {"counter": 193},
            "notification_history": [],
            "notifications": [],
            "outputs": {"output1": "Count is 192"},
            "parameters": {},
            "time": "2012-03-20T18:58:29.854-0400"
        }
    ]
}

In addition to the output changing, we can see the memory counter incrementing and we have a time stamp
for every state change of our agent instance.

Finally, if we decide we no longer need the running agent we can kill it by deleting it:

curl -X DELETE 'http://localhost:8080/users/test-user-1/agents/MyCounter-1'

Check status to see that the agent is no longer in the list of agents:

curl 'http://localhost:8080/users/test-user-1/agents'

{"agent_instances": [{
    "user": "test-user-1",
    "name": "MyHelloWorld-1",
    "definition": "HelloWorld",
    "description": "Our first test instance of an agent definition"
}]}

Now, let's enhance our counter agent so the the timer interval is a parameter so that the timer
can be set when the agent is instantiated. Let's also include both the timer expression and the
actual timer value in milliseconds in the output. And finally, lets make the output text an
optional parameter as well.

Although we can simply update the existing agent definition (with PUT), lets delete it and start fresh:

curl -X DELETE 'http://localhost:8080/users/test-user-1/agent_definitions/Counter'

curl -X POST 'http://localhost:8080/users/test-user-1/agent_definitions' -H Content-type:application/json -d'
{
 "name": "Counter",
 "parameters": [
  {
   "name": "timer_interval_expression",
   "type": "string",
   "default_value": "seconds(3)"
  },
  {
   "name": "output_text",
   "type": "string",
   "default_value": "The count is "
  },
 ],
 "memory": [
  {
   "name": "counter",
   "type": "int"
  }
 ],
 "timers": [
  {
   "name": "count",
   "interval": "eval(timer_interval_expression)",
   "script": "counter++;"
  }
 ],
 "outputs": [
  {
   "name": "output1",
   "type": "string",
   "compute": "output_text + counter"
  },
  {
   "name": "output2",
   "type": "string",
   "compute": "\"Timer interval expression: \" + timer_interval_expression + \" (\" + eval(timer_interval_expression) + \" ms.)\""
  },
  {
   "name": "output3",
   "type": "string",
   "compute": "\"Timer interval: \" + eval(timer_interval_expression) + \" ms.\""
  },
 ]
}'

Although the definition has two parameters, they each have reasonable default values so that we can
easily instantiate the agent without the bother of supplying any parameter values. So, let's do that:

curl -X POST 'http://localhost:8080/users/test-user-1/agents' -H Content-type:application/json -d'
{
 "name": "MyCounter-1",
 "description": "Counter with default parameter values",
 "addresses": "http://sfreebase.cloudapp.net",
     "type":"local"
}'

And let's see if the output is what we would expect:

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-1/output'

{
    "output1": "The count is 21",
    "output2": "Timer interval expression: seconds(3)",
    "output3": "Timer interval: 3000 ms."
}

Looks good. Now, lets instantiate a second agent while the first is still running. This one will have
a different timer interval, which is accomplished with explicit parameter values: 

curl -X POST 'http://localhost:8080/users/test-user-1/agents' -H Content-type:application/json -d'
{
 "name": "MyCounter-2",
 "definition": "Counter",
 "description": "Counter with explicit time expression parameter, but default text",
 "addresses": "http://sfreebase.cloudapp.net",
     "type":"local",
 "parameter_values": {"timer_interval_expression": "minutes(0.1)"}
}'

Note: We only specified one of the parameters, the other remains with its default value.

Also note that we need to name the instances to distinguish them.

Lets check to see how the parameter setting modified the behavvior of the agent definition:

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-2/output'

{
    "output1": "The count is 18",
    "output2": "Timer interval expression: minutes(0.1)",
    "output3": "Timer interval: 6000 ms."
}

Note the distinct timer expression and interval value.

Meanwhile, lets see how the other agent instance is doing:

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-1/output'

{
    "output1": "The count is 259",
    "output2": "Timer interval expression: seconds(3)",
    "output3": "Timer interval: 3000 ms."
}

Now, let's instantiate a third instance that also supplies output text via parameter as well:

curl -X POST 'http://localhost:8080/users/test-user-1/agents' -H Content-type:application/json -d'
{
 "name": "MyCounter-3",
 "definition": "Counter",
 "description": "Counter with explicit time expression and output text parameters",
 "addresses": "http://sfreebase.cloudapp.net",
     "type":"local",
 "parameter_values": {"timer_interval_expression": "hours(0.000555)", "output_text": "Our count: "}
}'

And let's check up on that agent instance:

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-3/output'

{
    "output1": "Our count: 31",
    "output2": "Timer interval expression: hours(0.000555)",
    "output3": "Timer interval: 1998 ms."
}

And the other two instances of the same agent definition are each doing their own thing as well:

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-1/output'

{
    "output1": "The count is 453",
    "output2": "Timer interval expression: seconds(3)",
    "output3": "Timer interval: 3000 ms."
}

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-2/output'

{
    "output1": "The count is 147",
    "output2": "Timer interval expression: minutes(0.1)",
    "output3": "Timer interval: 6000 ms."
}

And lets look at the summary of all of the agents for this user:

curl http://localhost:8080/users/test-user-1/agents

{"agent_instances": [
    {
        "user": "test-user-1",
        "name": "MyHelloWorld-1",
        "definition": "HelloWorld",
        "description": "Our first test instance of an agent definition"
    },
    {
        "user": "test-user-1",
        "name": "MyCounter-1",
        "definition": "Counter",
        "description": "Counter with default parameter values"
    },
    {
        "user": "test-user-1",
        "name": "MyCounter-2",
        "definition": "Counter",
        "description": "Counter with explicit time expression parameter, but default text"
    },
    {
        "user": "test-user-1",
        "name": "MyCounter-3",
        "definition": "Counter",
        "description": "Counter with explicit time expression and output text parameters"
    }
]}

And the detailed status for our last agent instance:

curl http://localhost:8080/users/test-user-1/agents/MyCounter-3/status

{
    "user": "test-user-1",
    "name": "MyCounter-3",
    "definition": "Counter",
    "description": "Counter with explicit time expression and output text parameters",
    "instantiated": "Tue, 20 Mar 2012 19:13:37 -0400",
    "updated": "",
    "trigger_interval": "50",
    "reporting_interval": "200",
    "public_output": false,
    "limit_instance_states_stored": 25,
    "enabled": true,
    "parameter_values": {
        "timer_interval_expression": "hours(0.000555)",
        "output_text": "Our count: "
    },
    "inputs_changed": "",
    "triggered": "",
    "outputs_changed": "Tue, 20 Mar 2012 19:14:15 -0400",
    "status": "active"
}

We can also query the detailed state of the agent instance to see what the actual values are for
parameters, memory, outputs, etc.:

curl 'http://localhost:8080/users/test-user-1/agents/MyCounter-3/status&state=yes&count=2'

{
    "user": "test-user-1",
    "name": "MyCounter-3",
    "definition": "Counter",
    "description": "Counter with explicit time expression and output text parameters",
    "instantiated": "Tue, 20 Mar 2012 19:13:37 -0400",
    "updated": "",
    "trigger_interval": "50",
    "reporting_interval": "200",
    "public_output": false,
    "limit_instance_states_stored": 25,
    "enabled": true,
    "parameter_values": {
        "timer_interval_expression": "hours(0.000555)",
        "output_text": "Our count: "
    },
    "inputs_changed": "",
    "triggered": "",
    "outputs_changed": "Tue, 20 Mar 2012 19:19:32 -0400",
    "status": "active",
    "state": [
        {
            "exceptions": [],
            "inputs": {},
            "last_dismissed_exception": "",
            "memory": {"counter": 176},
            "notification_history": [],
            "notifications": [],
            "outputs": {
                "output1": "Our count: 175",
                "output2": "Timer interval expression: hours(0.000555) (1998 ms.)",
                "output3": "Timer interval: 1998 ms."
            },
            "parameters": {
                "output_text": "Our count: ",
                "timer_interval_expression": "hours(0.000555)"
            },
            "time": "2012-03-20T19:19:30.204-0400"
        },
        {
            "exceptions": [],
            "inputs": {},
            "last_dismissed_exception": "",
            "memory": {"counter": 177},
            "notification_history": [],
            "notifications": [],
            "outputs": {
                "output1": "Our count: 176",
                "output2": "Timer interval expression: hours(0.000555) (1998 ms.)",
                "output3": "Timer interval: 1998 ms."
            },
            "parameters": {
                "output_text": "Our count: ",
                "timer_interval_expression": "hours(0.000555)"
            },
            "time": "2012-03-20T19:19:32.204-0400"
        }
    ]
}

You can see how the counter is incrementing at each step and the time stamp for each step.

Now, as a final introductory agent, lets create an agent that aggregates the output from three other
agents. The first agent will be a simple integer count, the second will generate a growing string, and
the third will simply be the date/time. The aggregating agent will simply have three output fields, one
for each of the input agents.

The important thing to note here is that the aggregating agent is purely input-driven and needs no
timers. Any time that the output of any of the input agents changed, the aggregating agent gets
triggered, subject to the automatic throttling of its trigger_interval constraint.

Create the first agent:

curl -X POST 'http://localhost:8080/users/test-user-1/agent_definitions' -H Content-type:application/json -d'
{
 "name": "Agent1",
 "memory": [{"name": "counter", "type": "int"}],
 "timers": [{"name": "count", "interval": "seconds(0.5)", "script": "counter++;"}],
 "outputs": [{"name": "outCounter", "type": "int", "compute": "counter"}]
}'

That's very similar to our original Counter agent, but formatted for conciseness rather than readability.

We're not going to instantiate it, because that will be done automatically when we instantiate the
aggregating agent - instantiating an agent automatically instantiates all of its input agents.

Now create the second agent

curl -X POST 'http://localhost:8080/users/test-user-1/agent_definitions' -H Content-type:application/json -d'
{
 "name": "Agent2",
 "memory": [{"name": "str", "type": "string"}],
 "timers": [{"name": "count", "interval": "seconds(3)", "script": "str += \"a\";"}],
 "outputs": [{"name": "outStr", "type": "string", "compute": "\"-\" + str + \"-\""}]
}'

Now create the third agent

curl -X POST 'http://localhost:8080/users/test-user-1/agent_definitions' -H Content-type:application/json -d'
{
 "name": "Agent3",
 "timers": [{"name": "count", "interval": "seconds(1.5)"}],
 "outputs": [{"name": "time", "type": "string", "compute": "now.toDate"}]
}'

And now we create the aggregating agent:

curl -X POST 'http://localhost:8080/users/test-user-1/agent_definitions' -H Content-type:application/json -d'
{
 "name": "Agent",
 "inputs":[
   {"name": "input1", "data_source": "Agent1"},
   {"name": "input2", "data_source": "Agent2"},
   {"name": "input3", "data_source": "Agent3"}],
 "outputs": [
   {"name": "outCounter", "type": "int", "compute": "input1.outCounter"},
   {"name": "outStr", "type": "string", "compute": "input2.outStr"},
   {"name": "time", "type": "string", "compute": "input3.time"},
   {"name": "all3", "type": "string",
     "compute": "\"Time is \" + input3.time + \", count is \" + input1.outCounter + \" string is \" + input2.outStr"}],
   "trigger_interval": "seconds(4)"
}'

Note the "trigger_interval" which throttles down the agent so that it only responds to changes in inputs
every four seconds.

Instantiate the aggregating agent:

curl -X POST 'http://localhost:8080/users/test-user-1/agents' -H Content-type:application/json -d'
{
 "name": "MyAgent-1",
 "addresses": "http://sfreebase.cloudapp.net",
     "type":"local",
 "definition": "Agent",
 "public_output": true
}'

Note that this will automatically instantiate the agents referenced as inputs.

The "public_output" option will allow any user to read the output of the agent instance. That is not
required here, but is a useful feature if you would like to be able to allow other users to "reuse"
the output of your agents.

Wait a couple of seconds and query the output of our aggregating agent:

curl http://localhost:8080/users/test-user-1/agents/MyAgent-1/output

{
    "outCounter": 7,
    "outStr": "-a-",
    "time": "Wed, 21 Mar 2012 18:23:44 -0400",
    "all3": "Time is Wed, 21 Mar 2012 18:23:44 -0400, count is 7 string is -a-"
}

Hit that URL again to see the agent output change as its inputs change:

curl http://localhost:8080/users/test-user-1/agents/MyAgent-1/output

{
    "outCounter": 19,
    "outStr": "-aaa-",
    "time": "Wed, 21 Mar 2012 18:23:50 -0400",
    "all3": "Time is Wed, 21 Mar 2012 18:23:50 -0400, count is 19 string is -aaa-"
}

And awhile later:

curl http://localhost:8080/users/test-user-1/agents/MyAgent-1/output

{
    "outCounter": 40,
    "outStr": "-aaaaaaa-",
    "time": "Wed, 21 Mar 2012 18:24:02 -0400",
    "all3": "Time is Wed, 21 Mar 2012 18:24:02 -0400, count is 40 string is -aaaaaaa-"
}

And lets look at the agent's status:

curl http://localhost:8080/users/test-user-1/agents/MyAgent-1

{
    "user": "test-user-1",
    "name": "MyAgent-1",
    "definition": "Agent",
    "description": "",
    "instantiated": "Wed, 21 Mar 2012 18:23:38 -0400",
    "updated": "",
    "trigger_interval": "50",
    "reporting_interval": "200",
    "public_output": true,
    "limit_instance_states_stored": 25,
    "enabled": true,
    "parameter_values": {},
    "inputs_changed": "Wed, 21 Mar 2012 18:24:30 -0400",
    "triggered": "Wed, 21 Mar 2012 18:24:30 -0400",
    "outputs_changed": "Wed, 21 Mar 2012 18:24:30 -0400",
    "status": "active"
}

It reports the time stamp of when the inputs last changed.

Note that unlike the output, the password is required since only the output is "public".

Let's look at the detailed status:

curl 'http://localhost:8080/users/test-user-1/agents/MyAgent-1/status&state=yes&count=1'

{
    "user": "test-user-1",
    "name": "MyAgent-1",
    "definition": "Agent",
    "description": "",
    "instantiated": "Wed, 21 Mar 2012 18:23:38 -0400",
    "updated": "",
    "trigger_interval": "50",
    "reporting_interval": "200",
    "public_output": true,
    "limit_instance_states_stored": 25,
    "enabled": true,
    "parameter_values": {},
    "inputs_changed": "Wed, 21 Mar 2012 18:24:41 -0400",
    "triggered": "Wed, 21 Mar 2012 18:24:41 -0400",
    "outputs_changed": "Wed, 21 Mar 2012 18:24:41 -0400",
    "status": "active",
    "state": [{
        "exceptions": [],
        "inputs": {
            "input1": {"outCounter": 101},
            "input2": {"outStr": "-aaaaaaaaaaaaaaaaaaa-"},
            "input3": {"time": "Wed, 21 Mar 2012 18:24:40 -0400"}
        },
        "last_dismissed_exception": "",
        "memory": {},
        "notification_history": [],
        "notifications": [],
        "outputs": {
            "all3": "Time is Wed, 21 Mar 2012 18:24:40 -0400, count is 100 string is -aaaaaaaaaaaaaaaaaaa-",
            "outCounter": 100,
            "outStr": "-aaaaaaaaaaaaaaaaaaa-",
            "time": "Wed, 21 Mar 2012 18:24:40 -0400"
        },
        "parameters": {},
        "time": "2015-06-02T18:24:41.133-0400"
    }]
}

Note that the state shows the values of all of the inputs and the outputs.

Let's look at the status for all agent instances:

curl 'http://localhost:8080/users/test-user-1/agents'

{"agent_instances": [
    {
        "user": "test-user-1",
        "name": "Agent1_1",
        "definition": "Agent1",
        "description": null
    },
    {
        "user": "test-user-1",
        "name": "Agent2_2",
        "definition": "Agent2",
        "description": null
    },
    {
        "user": "test-user-1",
        "name": "Agent3_3",
        "definition": "Agent3",
        "description": null
    },
    {
        "user": "test-user-1",
        "name": "MyAgent-1",
        "definition": "Agent",
        "description": ""
    }
]}

Note that the agent server automatically assigned names to the input agents that were automatically
instantiated, Agent1_1, Agent2_2, and Agent3_3.

Let's query the detailed status and state of each of those agent instances:

curl 'http://localhost:8080/users/test-user-1/agents/Agent1_1/status&state=yes&count=1'

{
    "user": "test-user-1",
    "name": "Agent1_1",
    "definition": "Agent1",
    "description": "",
    "instantiated": "Wed, 21 Mar 2012 18:23:38 -0400",
    "updated": "",
    "trigger_interval": "50",
    "reporting_interval": "200",
    "public_output": false,
    "limit_instance_states_stored": 25,
    "enabled": true,
    "parameter_values": {},
    "inputs_changed": "",
    "triggered": "",
    "outputs_changed": "Wed, 21 Mar 2012 18:25:08 -0400",
    "status": "active",
    "state": [{
        "exceptions": [],
        "inputs": {},
        "last_dismissed_exception": "",
        "memory": {"counter": 146},
        "notification_history": [],
        "notifications": [],
        "outputs": {"outCounter": 145},
        "parameters": {},
        "time": "2015-06-02T18:25:08.134-0400"
    }]
}

Note the memory variable there.

curl 'http://localhost:8080/users/test-user-1/agents/Agent2_2/status&state=yes&count=1'

{
    "user": "test-user-1",
    "name": "Agent2_2",
    "definition": "Agent2",
    "description": "",
    "instantiated": "Wed, 21 Mar 2012 18:23:39 -0400",
    "updated": "",
    "trigger_interval": "50",
    "reporting_interval": "200",
    "public_output": false,
    "limit_instance_states_stored": 25,
    "enabled": true,
    "parameter_values": {},
    "inputs_changed": "",
    "triggered": "",
    "outputs_changed": "Wed, 21 Mar 2012 18:25:16 -0400",
    "status": "active",
    "state": [{
        "exceptions": [],
        "inputs": {},
        "last_dismissed_exception": "",
        "memory": {"str": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},
        "notification_history": [],
        "notifications": [],
        "outputs": {"outStr": "-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-"},
        "parameters": {},
        "time": "2015-06-02T18:25:16.808-0400"
    }]
}

curl 'http://localhost:8080/users/test-user-1/agents/Agent3_3/status&state=yes&count=1'

{
    "user": "test-user-1",
    "name": "Agent3_3",
    "definition": "Agent3",
    "description": "",
    "instantiated": "Wed, 21 Mar 2012 18:23:39 -0400",
    "updated": "",
    "trigger_interval": "50",
    "reporting_interval": "200",
    "public_output": false,
    "limit_instance_states_stored": 25,
    "enabled": true,
    "parameter_values": {},
    "inputs_changed": "",
    "triggered": "",
    "outputs_changed": "Wed, 21 Mar 2012 18:25:25 -0400",
    "status": "active",
    "state": [{
        "exceptions": [],
        "inputs": {},
        "last_dismissed_exception": "",
        "memory": {},
        "notification_history": [],
        "notifications": [],
        "outputs": {"time": "Wed, 21 Mar 2012 18:25:23 -0400"},
        "parameters": {},
        "time": "2015-06-02T18:25:25.058-0400"
    }]
}

Now that we are done with this introductory example agent, let's kill it off:

curl -X DELETE 'http://localhost:8080/users/test-user-1/agents/MyAgent-1/status'

Note that this will automatically kill off the three input agents since they are no longer referenced
and were auto-created.

Let's check the agent instance status to see that there are no longer any agents running:

curl 'http://localhost:8080/users/test-user-1/agents'

continue . .  .

more agentdefinitions

+++++++++++++++++++++++++++++++++++++++++
{
    "name": "definitions0",
    "memory": [
        {
            "name": "counter",
            "type": "int"
        }
    ],
    "timers": [
        {
            "name": "count",
            "interval": "seconds(4)",
            "script": "counter++;"
        }
    ],
    "outputs": [
        {
            "name": "output1",
            "type": "int",
            "compute": "counter"
        }
    ]
}

++++++++++++++++++++++++++++++++++++++++++++++++++++
{
    "name": "definitions1,
    "memory": [
        {
            "name": "s",
            "type": "string"
        }
    ],
    "timers": [
        {
            "name": "s",
            "interval": "seconds(4)",
            "script": "for (int i = 1; i <= 5; i++) s += ' ' + i;  return s;"
        }
    ],
    "outputs": [
        {
            "name": "output1",
            "type": "string",
            "compute": "s"
        }
    ]
}
++++++++++++++++++++++++++++++++++++++++
{
 "name": "Definition2",
 "timers": [{"name": "count", "interval": "seconds(1.5)"}],
 "outputs": [{"name": "time", "type": "string", "compute": "now.toDate"}]
}
+++++++++++++++++++++++++++++++++
{
    "name": "definitions3",
    "memory": [
        {
            "name": "p",
            "type": "int",
            "default_value":1234
        }
    ],
    "timers": [
        {
            "name": "get_p",
            "interval": "seconds(4)",
            "script": "int get_p(){return p;};"
        }
    ],
    "outputs": [
        {
            "name": "output1",
            "type": "int",
            "compute": "get_p()"
        }
    ]
}
++++++++++++++++++++++++++++++++++++++++

{
    "name": "definitions2",
    "memory": [
        {
            "name": "counter",
            "type": "int"
        }
    ],
    "timers": [
        {
            "name": "count",
            "interval": "seconds(4)",
            "script": "counter++;"
        }
    ],

    "notifications": [
        {
            "name": "N0000000001",
            "description": "TEST MESSAGE",
            "type": "notify_only",
            "condition": "",
            "manual": false,
            "enabled": true,
            "timeout": "",
            "suspend": false,
            "details": [
                {
                    "nominal_length": 100,
                    "max_length": 1000,
                    "valid_regex": ".*",
                    "default_value": "its Test Message",
                    "description": "",
                    "name": "test",
                    "label": "",
                    "type": "string"
                }
            ],
            "scripts": [
            {
            "name":"test",
            "script":"string s; for (int i = 1; i <= 50; i++) s += ' ' + i;  return s;",
            "public":"true",
            "execution_level":"2"
            }
                    ]
        }
    ]
}
 String name = scriptJson.optString("name", "");
        String parameters = scriptJson.optString("parameters", "");
        String description = scriptJson.optString("description", "");
        String script = scriptJson.optString("script", "");
        int executionLevel = scriptJson.optInt("execution_level");
        boolean publicAccess = scriptJson.optBoolean("public");
+++++++++++++++++++++++++++++++++++++++++++++++++++++
TEST SCRIPT
+++++++++++++++++++++++++++++++++++++++++++++++++++++
MESSAGE QUEUE
{
    "sender": "sdbpedia.cloudapp.net", /Name Agent Sender
    "receiver": "sdbpedia.cloudapp.net",
    "replyTo": "",
    "content": "http://dbpedia.org/resource/Tim_Berners-Lee -p (<http://dbpedia.org/property/influenced>[ASK {?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}])* -t 5 -stream -noSaveModels",
    "lenguage": "",
    "encoding": "",
    "ontology": "",
    "protocol": "QUERY",
    "replyWith": "",
    "inReplyTo": "",
    "replyBy": "",
    "delegate": false
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++
WEB


web w; return w.get('http://feeds.reuters.com/reuters/MostRead?format=xml').xml;
web w; return w.get('http://www.newyorkfed.org/rss/feeds/fedfunds.xml').xml;
web w; return w.get('http://www.newyorkfed.org/rss/feeds/fedfunds.xml').xml['rdf:RDF']['channel']['description'];
web w; return w.get('http://www.newyorkfed.org/rss/feeds/fedfunds.xml').xml['rdf:RDF']['item']['description']['text_1'];
web w; return w.get('http://www.newyorkfed.org/rss/feeds/fedfunds.xml').xml['rdf:RDF']['item']['cb:statistics']['cb:interestRate']['cb:value']['text_1'].float;

Operations Basic


=============================================
if (2 + 2 == 4) return 'Yes';
else return 'No';
=============================================
int sum;
for (sum = 0, int i = 1; i <= 10; i++) sum += i;
return sum;
=============================================
string s;
for (int i = 1; i <= 5; i++) s += ' ' + i;
return s;
=============================================
web w;
string s = w.get('http://twitter.com');
return w.statusCode;
=============================================
message w;
string s = w.get('all');
return w.process;
=============================================


float sum;
for (sum = 0.0, int j = 0, float f = 0.11; j < 7; j++, f++) sum += f * 0.11;  return sum;
int sum = 0, int i = 0; for (;;){if (i > 10) break; sum += i++;}  return sum;
int sum = 0, int i = 0; while (true){if (i > 10) break; sum += i++;}  return sum;
int sum = 0, int i = 0; do {if (i > 10) break; sum += i++;} while (true);  return sum;

return [2, 5, 3, 9].sum;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
{
    "user": "Test-User",
    "name": "HelloWorld2",
    "description": "Test agent definition",
    "outputs": [
        {
            "name": "field1",
            "type": "string",
            "default_value": "Hello World"
        },
        {
            "name": "field2",
            "type": "int",
            "default_value": 123
        },
        {
            "name": "field3",
            "type": "float",
            "default_value": 4.56
        },
        {
            "name": "field4",
            "type": "boolean",
            "default_value": true
        }
    ],
    "scripts": [
        {
            "name": "do_notify1",
            "script": "notify('Not1');",
            "public": true
        },
        {
            "name": "do_notify2",
            "script": "notifications.Not2.vendor='AbcCorp.';Not2.price=123.45;Not2.purchased=true;notify('Not2');",
            "public": true
        },
        {
            "name": "do_notify2a",
            "script": "notifications.Not2.vendor='DeltaLtd.';Not2.price=250.75;Not2.purchased=false;notify('Not2');",
            "public": true
        }
    ],
    "notifications": [
        {
            "name": "Not1",
            "type": "notify_only",
            "manual": true
        },
        {
            "name": "Not2",
            "description": "Secondnotification",
            "type": "yes_no",
            "manual": true,
            "timeout": "minutes(90)",
            "scripts": [
                {
                    "name": "accept",
                    "script": "return2+2;"
                }
            ],
            "details": [
                {
                    "name": "vendor",
                    "type": "string",
                    "default_value": "N/A"
                },
                {
                    "name": "price",
                    "type": "float",
                    "default_value": 0
                },
                {
                    "name": "purchased",
                    "type": "boolean",
                    "default_value": false
                }
            ]
        }
    ]
}