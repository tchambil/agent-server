/* Generated By:JavaCC: Do not edit this line. PathExpression.java */
package dcc.agent.server.service.swget.regExpression.parser;

import dcc.agent.server.service.swget.regExpression.automaton.RegExpIntersect;
import dcc.agent.server.service.swget.regExpression.automaton.RegExpPossiblyMissing;
import dcc.agent.server.service.swget.regExpression.automaton.RegExpPred;
import dcc.agent.server.service.swget.regExpression.automaton.RegExpRepeat;
import dcc.agent.server.service.swget.regExpression.automaton.RegExpRepeatPlus;
import dcc.agent.server.service.swget.regExpression.automaton.RegExpUnion;
import dcc.agent.server.service.swget.regExpression.automaton.RegularExpressionBase;

import java.io.UnsupportedEncodingException;

public class PathExpression implements PathExpressionConstants {
	String reg;
	RegularExpressionBase reg1;

	/** Generated Token Manager. */
	public PathExpressionTokenManager token_source;

	SimpleCharStream jj_input_stream;

	/** Current token. */
	public Token token;

	/** Next token. */
	public Token jj_nt;

	private int jj_ntk;

	private int jj_gen;

	final private int[] jj_la1 = new int[5];

	static private int[] jj_la1_0;

	static {
		jj_la1_init_0();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x2000, 0x4000, 0x8e0, 0x48200, 0x20000, };
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();

	private int[] jj_expentry;

	private int jj_kind = -1;

	/** Constructor with InputStream. */
	public PathExpression(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public PathExpression(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new PathExpressionTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Constructor. */
	public PathExpression(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new PathExpressionTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Constructor with generated Token Manager. */
	public PathExpression(PathExpressionTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	public PathExpression(String reg) {
		this.reg = reg;
	}

	final public RegularExpressionBase ANDEXPRESSION(RegularExpressionBase reg)
			throws ParseException {
		RegularExpressionBase reg1;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case AND:
			jj_consume_token(AND);
			reg1 = SUBEXPRESSION();
			{
				if (true)
					return new RegExpIntersect(reg, reg1);
			}
			break;
		default:
			jj_la1[1] = jj_gen;
			{
				if (true)
					return reg;
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public RegularExpressionBase BASEEXPRESSION() throws ParseException {
		Token t;
		RegularExpressionBase reg;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case PREDICATE:
			// {System.out.println("BASEEXPRESSION - > PRED");}
			t = jj_consume_token(PREDICATE);
			if (t.image.equals("<_>"))
				reg = new RegExpPred(true);
			else
				reg = new RegExpPred(t.image);
			{
				if (true)
					return reg;
			}
			break;
		case LBRACKET:
			jj_consume_token(LBRACKET);
			reg = Start();
			jj_consume_token(RBRACKET);
			{
				if (true)
					return reg;
			}
			break;
		case ACTION:
			t = jj_consume_token(ACTION);
			{
				if (true)
					return reg = new RegExpPred(t.image);
			}
			break;
		default:
			jj_la1[3] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[19];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 5; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 19; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	public RegularExpressionBase getRegExpress() {
		return reg1;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	/* syntactic analyser */
	final public RegularExpressionBase NExpr() throws ParseException {
		RegularExpressionBase reg;
		reg = Start();
		jj_consume_token(0);
		{
			if (true)
				return reg;
		}
		throw new Error("Missing return statement in function");
	}

	final public RegularExpressionBase OREXPRESSION(RegularExpressionBase reg)
			throws ParseException {
		RegularExpressionBase reg1;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case OR:
			jj_consume_token(OR);
			reg1 = Start();
			{
				if (true)
					return new RegExpUnion(reg, reg1);
			}
			break;
		default:
			jj_la1[0] = jj_gen;
			{
				if (true)
					return reg;
			}
		}
		throw new Error("Missing return statement in function");
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(PathExpressionTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	final public RegularExpressionBase REPETESYMBOL(RegularExpressionBase reg)
			throws ParseException {
		RegularExpressionBase reg1;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case KLEENE:
			jj_consume_token(KLEENE);
			reg1 = new RegExpRepeat(reg);
			{
				if (true)
					return reg1;
			}
			break;
		case PLUS:
			jj_consume_token(PLUS);
			reg1 = new RegExpRepeatPlus(reg);
			{
				if (true)
					return reg1;
			}
			break;
		case QUESTION:
			jj_consume_token(QUESTION);
			reg1 = new RegExpPossiblyMissing(reg);
			{
				if (true)
					return reg1;
			}
			break;
		case LANGLEBRACKET:
			// {System.out.println("REPETESYMBOL - > REPETITION");}
			reg1 = REPETITION(reg);
			{
				if (true)
					return reg1;
			}
			break;
		default:
			jj_la1[2] = jj_gen;
			{
				if (true)
					return reg;
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public RegularExpressionBase REPETITION(RegularExpressionBase reg)
			throws ParseException {
		int repi, repf;
		Token ti, tf;
		RegularExpressionBase regf;

		jj_consume_token(LANGLEBRACKET);
		ti = jj_consume_token(NUMBER);
		jj_consume_token(INTERVAL);
		tf = jj_consume_token(NUMBER);
		repi = Integer.parseInt(ti.image);
		repf = Integer.parseInt(tf.image);
		jj_consume_token(RANGLEBRACKET);
		regf = null;
		if (repi == 0) {
			regf = new RegExpPossiblyMissing(reg);
		} else {
			regf = reg;
			for (int i = 2; i <= repi; i++) {
				regf = new RegExpIntersect(regf, reg);
			}
		}
		for (int i = repi + 1; i <= repf; i++) {
			regf = new RegExpIntersect(regf, new RegExpPossiblyMissing(reg));
		}
		{
			if (true)
				return regf;
		}
		throw new Error("Missing return statement in function");
	}

	final public RegularExpressionBase Start() throws ParseException {
		RegularExpressionBase reg;
		RegularExpressionBase reg1;
		String trig;
		// {System.out.println("Start - > SUBEXPRESSION OREXPRESSION");}
		reg = SUBEXPRESSION();
		reg1 = OREXPRESSION(reg);
		{
			if (true)
				return reg1;
		}
		throw new Error("Missing return statement in function");
	}

	public RegularExpressionBase startParsing() throws ParseException,
			TokenMgrError {
		PathExpression parser = null;
		try {
			parser = new PathExpression(new java.io.ByteArrayInputStream(
					reg.getBytes("UTF-8")));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		reg1 = parser.NExpr();
		return reg1;
	}

	final public RegularExpressionBase SUBEXPRESSION() throws ParseException {
		RegularExpressionBase reg;
		RegularExpressionBase reg1;
		RegularExpressionBase reg2;
		Token t;
		// {System.out.println("SUBEXPRESSION - > BASEEXPRESSION REPETESYMBOL TEST ANDEXPRESSION");}
		reg = BASEEXPRESSION();
		reg1 = REPETESYMBOL(reg);
		reg2 = TEST();
		if (reg2 != null)
			reg1 = new RegExpIntersect(reg1, reg2);
		reg1 = ANDEXPRESSION(reg1);
		{
			if (true)
				return reg1;
		}
		throw new Error("Missing return statement in function");
	}

	final public RegularExpressionBase TEST() throws ParseException {
		Token t;
		RegularExpressionBase reg;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case SPRQLQUERY:
			// {System.out.println("TEST - > QUERY");}
			t = jj_consume_token(SPRQLQUERY);
			reg = new RegExpPred(t.image);
			{
				if (true)
					return reg;
			}
			break;
		default:
			jj_la1[4] = jj_gen;
			{
				if (true)
					return null;
			}
		}
		throw new Error("Missing return statement in function");
	}

}
